@using Tres.Smss.Services
@using Tres.Smss.Models

@namespace Tres.Smss.Modules
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject HttpClient http
@inject SiteState sitestate

@if (_Smss == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input type="text" name="phoneNbr" @bind="phoneNbr" placeholder="Phone Number"/> <br />
    <input type="text" name="message" @bind="message" placeholder="Message" />
       
    }
    else
    {
        <p>No Smss To Display</p>
    }
}

@code {

    string phoneNbr = "";
    string message = "";

    ISmsService SmsService;
    List<Sms> _Smss;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SmsService = new SmsService(http, sitestate, NavigationManager);
            _Smss = await SmsService.GetSmssAsync(ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Sms {Error}", ex.Message);
            AddModuleMessage("Error Loading Sms", MessageType.Error);
        }
    }

    private async Task Delete(Sms Sms)
    {
        try
        {
            await SmsService.DeleteSmsAsync(Sms.SmsId);
            await logger.LogInformation("Sms Deleted {Sms}", Sms);
            _Smss = await SmsService.GetSmssAsync(ModuleState.ModuleId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Sms {Sms} {Error}", Sms, ex.Message);
            AddModuleMessage("Error Deleting Sms", MessageType.Error);
        }
    }

    private async Task SendMessage()
    {
        var sms = new Sms();
        sms.PhoneNbr = phoneNbr;
        sms.Message = message;

        try
        {
            await SmsService.AddSmsAsync(sms);

            StateHasChanged();
        }
        catch ()
        {

        }
    }



}